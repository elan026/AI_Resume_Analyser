ðŸš€ Project Overview

Weâ€™ll build a web app where:

Users upload their resume (.pdf or .docx).

AI extracts text & parses sections (Education, Experience, Skills, Projects, etc.).

LLM (via LangChain) evaluates resume against job description or general ATS criteria.

Streamlit displays analysis:

ATS Score

Missing Keywords

Suggestions for improvement

Strengths & Weaknesses

ðŸ›  Tech Stack (2025 Relevant)

Frontend & UI â†’ Streamlit
 (simple & interactive UI)

Backend Orchestration â†’ LangChain
 (chains, prompts, parsing)

LLM Provider â†’ OpenAI GPT-4.1, Anthropic Claude 3.5, or local LLM via Ollama

Document Processing â†’

PyPDF2 / pdfplumber for PDFs

python-docx for .docx

Vector Store (optional for JDâ€“resume matching) â†’ FAISS / Chroma

Embeddings â†’ text-embedding-3-large (OpenAI) or Instructor Embeddings

Environment â†’ Python 3.11+, pipenv / poetry

ðŸ“‚ Project Structure
resume-analyser/
â”‚â”€â”€ app.py                # Streamlit main app
â”‚â”€â”€ chains/
â”‚   â””â”€â”€ resume_chain.py   # LangChain prompt + pipeline
â”‚â”€â”€ utils/
â”‚   â”œâ”€â”€ file_parser.py    # Extract text from resume
â”‚   â””â”€â”€ scorer.py         # ATS scoring logic
â”‚â”€â”€ requirements.txt
â”‚â”€â”€ README.md

ðŸ”‘ Core Features

Upload Resume (PDF/DOCX)

Extract Text â†’ Parse Education, Skills, Projects

ATS Analysis â†’ Compare with Job Description (optional input)

LLM Feedback â†’ Strengths, Weaknesses, Improvements

ATS Score â†’ 0â€“100 scale